name: CD Pipeline

on:
  workflow_run:
    # CI Pipeline이 실행된 후 실행
    workflows: [ "CI Pipeline" ]
    types:
      - completed


jobs:
  deploy:

    # 리눅스 서버의 Runner에서 실행
    runs-on: self-hosted
    steps:

      # 현재 레포지토리 가져오기
      - name: Checkout repository
        uses: actions/checkout@v4

      # Docker 로그인
      - name: Login to Dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      # Docker 이미지 Pull
      - name: Pull Docker image
        run: docker pull $DOCKER_USERNAME/lpilogue-rec:latest
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

      # lpilogue-db가 실행중인 경우 중지
      - name: Stop lpilogue-db
        run: docker stop lpilogue-db || true && docker rm lpilogue-db || true

      # lpilogue-rec가 실행중인 경우 중지
      - name: Stop lpilogue-rec
        run: docker stop lpilogue-rec || true && docker rm lpilogue-rec || true

      # flask-app만 다시 실행
      - name: Run Docker compose
        env:
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_NAME: ${{ secrets.DB_NAME }}
          FILE_SERVER_URL: ${{ secrets.FILE_SERVER_URL }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          SPOTIFY_CLIENT_ID: ${{ secrets.SPOTIFY_CLIENT_ID }}
          SPOTIFY_CLIENT_SECRET: ${{ secrets.SPOTIFY_CLIENT_SECRET }}
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
          ROOT_PASSWORD: ${{ secrets.ROOT_PASSWORD }}
        run: |
          echo "DB_USER=$DB_USER" >> .env
          echo "DB_PASSWORD=$DB_PASSWORD" >> .env
          echo "DB_HOST=$DB_HOST" >> .env
          echo "DB_NAME=$DB_NAME" >> .env
          echo "FILE_SERVER_URL=FILE_SERVER_URL" >> .env
          echo "GOOGLE_API_KEY=$GOOGLE_API_KEY" >> .env
          echo "SPOTIFY_CLIENT_ID=$SPOTIFY_CLIENT_ID" >> .env
          echo "SPOTIFY_CLIENT_SECRET=$SPOTIFY_CLIENT_SECRET" >> .env
          echo "YOUTUBE_API_KEY=$YOUTUBE_API_KEY" >> .env
          echo "ROOT_PASSWORD=$ROOT_PASSWORD" >> .env
          docker compose rm -f flask-app && docker compose up -d flask-app
